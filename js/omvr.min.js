/**
 * @author takumadx / http://www.ohmydigifab.com/
 */

function OMVR() {	
	var myAttitude = {
		Roll : 0,
		Pitch : 0,
		Yaw : 0
	};

	var vehicleAttitude = {
		Roll : 0,
		Pitch : 0,
		Yaw : 0
	};

	var camera, scene, renderer, mesh;
	
	var window_mode = false;
	var texture;
	var m_canvas;
	var m_context;
	var effect;
	
	var videoImage;
	var videoImageContext;
	var videoTexture;	
	var video;
	var videoStart = 0;

	function onWindowResize() {

		camera.aspect = window.innerWidth / window.innerHeight;
		camera.updateProjectionMatrix();

		renderer.setSize(window.innerWidth, window.innerHeight);
		effect.setSize(window.innerWidth, window.innerHeight);
	}
	
	function splitExt(filename) {
	    return filename.split(/\.(?=[^.]+$)/);
	}
	
	function isSmartphone(){
		var user="";
		if ((navigator.userAgent.indexOf('iPhone') > 0 && navigator.userAgent.indexOf( 'iPad') == -1) || navigator.userAgent.indexOf('iPod') > 0 || navigator.userAgent.indexOf('Android') > 0) {
			return true;
		} else {
			return false;
		}
	}

	var fisheyeCameraList = Array();

	var fisheye_vertexShader = [ "",

	"varying   vec4 vTexCoord;",

	"void main(void){",

	"    vTexCoord = vec4(position,1.0);",

	"    gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);",

	"}",

	"" ].join("\n");
	var fisheye_fragmentShader = [ "",

	"varying vec4 vTexCoord;",

	"uniform bool flipX;",

	"uniform bool flipY;",

	"uniform sampler2D texture;",

	"const float PI = 3.1415926535;",

	"void main(void){",

	"    float pitch = atan(vTexCoord.y, vTexCoord.x);",

	"    float n = length(vTexCoord.xy);",

	"    float roll = atan(n, vTexCoord.z);",

	"    float r = 1.33 * roll / PI;",

	"    float u = r * cos(pitch) + 0.5;",

	"    float v = r * sin(pitch) + 0.5;",

	"    if(r > 0.60 || u < 0.0 || u > 1.0 || v < 0.0 || v > 1.0){",

	"		gl_FragColor = vec4(0.2, 0.2, 0.2, 1.0);",

	"    }",

	"    else{",

	"	    if(flipX){",

	"	    	u = 1.0 - u;",

	"	    }",

	"	    if(flipY){",

	"	    	v = 1.0 - v;",

	"	    }",

	"	    gl_FragColor = texture2D(texture, vec2(u, v));",

	"	}",

	"}",

	"" ].join("\n");

	var stereoEnabled = false;

	var self = {
		setMyAttitude : function(value) {
			myAttitude = value;
		},

		setVehicleAttitude : function(value) {
			vehicleAttitude = value;
		},

		addFisheyeCamera : function(default_image_url, imageUrl, flipX, flipY, image_updated_callback, attitude) {
			var geometry = new THREE.SphereGeometry(500, 100, 100, 0, Math.PI);
			geometry.scale(1, 1, 1);

			var texLoader = new THREE.TextureLoader();
			var texture = texLoader.load(default_image_url, function(tex) {
				var material = new THREE.ShaderMaterial({
					vertexShader : fisheye_vertexShader,
					fragmentShader : fisheye_fragmentShader,
					uniforms : {
						flipX : {
							type : 'i',
							value : flipX
						},
						flipY : {
							type : 'i',
							value : flipY
						},
						texture : {
							type : 't',
							value : texture
						}
					},
					side : THREE.DoubleSide,
					// 通常マテリアルのパラメータ
					blending : THREE.AdditiveBlending,
					transparent : true,
					depthTest : false
				});
				material.needsUpdate = true;
				var mesh = new THREE.Mesh(geometry, material);
				scene.add(mesh);

				fisheyeCameraList.push({
					loading : false,
					default_image_url : default_image_url,
					imageUrl : imageUrl,
					image_updated_callback : image_updated_callback,
					mesh : mesh,
					attitude : attitude
				});
			});
		},

		fps : 0,
		checkImageDelay : 1000,

		setTexture : function(default_image_url, default_image_type, imageUrl, image_type, flipX, flipY, image_updated_callback, attitude) {
			var geometry = new THREE.SphereGeometry(500, 60, 40);
			geometry.scale(-1, 1, 1);
  
			var maxAnisotropy = renderer.getMaxAnisotropy();    
			var setTextureFunc = function(tex) {
				tex.generateMipmaps = false;// this is for performance
				tex.minFilter = THREE.LinearFilter;// this is for
				tex.anisotropy = maxAnisotropy;
				var material = new THREE.MeshBasicMaterial({
					map : tex
				});
				material.needsUpdate = true;
				if(mesh) {
					scene.remove(mesh);
					mesh = null;
				}
				mesh = new THREE.Mesh(geometry, material);
				scene.add(mesh);

				var euler_correct = new THREE.Euler(THREE.Math.degToRad(attitude.Roll), THREE.Math.degToRad(attitude.Pitch), THREE.Math.degToRad(attitude.Yaw));
				euler_correct.order = "ZYX";

				var quat_correct = new THREE.Quaternion();
				quat_correct.setFromEuler(euler_correct);

				var target = new THREE.Vector3(0, 0, 1);
				mesh.up = new THREE.Vector3(0, 1, 0);

				target.applyQuaternion(quat_correct);
				mesh.up.applyQuaternion(quat_correct);

				mesh.lookAt(target);

				fisheyeCameraList.push({
					loading : false,
					default_image_url : default_image_url,
					imageUrl : imageUrl,
					image_updated_callback : image_updated_callback,
					mesh : mesh,
					attitude : attitude
				});
				var last_modified = "";
				var start_time = Date.now();
				var duration = 0;
				var load = function(callback) {
					var timeout = false;
					var succeeded = false;
					var texLoader = new THREE.TextureLoader();
					texLoader.crossOrigin = '*';
					texLoader.load(imageUrl, function(tex) {
						var end_time = Date.now();
						var _duration = end_time - start_time;
						if (_duration != 0) {
							duration = 0.9 * duration + 0.1 * _duration;
							self.fps = 1000.0 / (duration != 0 ? duration : 1);
							start_time = end_time;
						}
						// console.log('Drawing image');
						tex.generateMipmaps = false;// this is for performance
						tex.minFilter = THREE.LinearFilter;// this is for
						tex.anisotropy = maxAnisotropy;
						// performance
						var old = mesh.material.map;
						mesh.material.map = tex;
						mesh.material.needsUpdate = true;
						old.dispose();
						if(!timeout) {
							callback();
							succeeded = true;
						}
					});
					setTimeout(function() {
						if(!succeeded) {
							timeout = true;
							callback();
						}
					}, 5000);
				};
				var check_and_load = function(){
					if(self.checkImageLastUpdate) {
						$.ajax({
							url: imageUrl,
							type: 'HEAD',
						}).done(function(data, status, xhr) {
							var new_last_modified = xhr.getResponseHeader('Last-Modified');
							if(new_last_modified == last_modified) {
								setTimeout(function(){
									check_and_load();
								}, self.checkImageDelay);
							} else {
								last_modified = new_last_modified;
								load(check_and_load);
							}
						});
					} else {
						load(check_and_load);
					}
				};
				if(imageUrl) {
					check_and_load();
				}
			};
			if(!default_image_type) {
				default_image_type = splitExt(default_image_url.split('?')[0])[1].toLowerCase();
			}
			switch(default_image_type) {
			case 'video':
			case 'mp4':	
	    		video = document.createElement('video');
 				video.crossOrigin = "Anonymous";
			    video.src = default_image_url;
				video.load();
				if(isSmartphone()) {
				    video.addEventListener("canplay", function() {
				        console.log("video canplay!");
						videoImage = document.createElement('canvas');
						videoImage.width = video.videoWidth;
						videoImage.height = video.videoHeight;
						videoImageContext = videoImage.getContext('2d');
						videoImageContext.fillStyle = '#000000';
						videoImageContext.fillRect(0, 0, videoImage.width, videoImage.height);
						videoTexture = new THREE.Texture(videoImage);
						setTextureFunc(videoTexture);
	    				video.removeEventListener("canplay", arguments.callee, false);
				    }, false);
				} else {
					video.autoplay = true;
					video.loop = true;					
					video.crossOrigin = '*';
					setTextureFunc(new THREE.VideoTexture(video));
				}
				break;
			case 'jpg':
			case 'jpeg':
			case 'png':
			case 'image':
			default:
				var texLoader = new THREE.TextureLoader();
				texLoader.crossOrigin = '*';
				texLoader.load(default_image_url, setTextureFunc);
				break;
			}
		},

		init : function(canvas) {
			m_canvas = canvas;
			m_context = m_canvas.getContext('2d');
			{
				window_mode = true;
				video = new Image();
				video.src = "http://192.168.40.2:8080/?action=stream";
			}

			camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1100);
			camera.position = new THREE.Vector3(0, 0, 0);
			camera.target = new THREE.Vector3(0, 0, -1);
			camera.up = new THREE.Vector3(0, 1, 0);
			camera.lookAt(camera.target);

			scene = new THREE.Scene();

			renderer = new THREE.WebGLRenderer({
				canvas : canvas,
				antialias : true
			});
			renderer.setPixelRatio(window.devicePixelRatio);
			renderer.setSize(window.innerWidth, window.innerHeight);
			container.appendChild(renderer.domElement);

			effect = new THREE.StereoEffect(renderer);
			effect.setSize(window.innerWidth, window.innerHeight);

			window.addEventListener('resize', onWindowResize, false);
		},

		setFov : function(value) {
			camera.fov = value;
			onWindowResize();
		},
		
		checkImageLastUpdate : true,

		animate : function(elapsedTime) {
			if(window_mode) {
   				m_context.drawImage(video, 0, 0);
				return;
			}
			if(video && videoTexture && video.duration > 0) {
				if(videoStart == 0) {
					videoStart = elapsedTime;
					video.currentTime = 0;
				}
				if (video.readyState === video.HAVE_ENOUGH_DATA) {
				    videoImageContext.drawImage(video, 0, 0);
				    videoTexture.needsUpdate = true;
	           		var videoElapsedTime = (elapsedTime - videoStart) / 1000.0;
		            video.currentTime = videoElapsedTime % video.duration;
				}
			}
			{// myAttitude
				var myAttitude_euler = new THREE.Euler(THREE.Math.degToRad(myAttitude.Roll), THREE.Math.degToRad(-myAttitude.Pitch), THREE.Math.degToRad(myAttitude.Yaw));
				myAttitude_euler.order = "ZYX";

				var quat2 = new THREE.Quaternion();
				quat2.setFromEuler(myAttitude_euler);

				camera.target = new THREE.Vector3(0, 0, -1);
				camera.up = new THREE.Vector3(0, 1, 0);

				camera.target.applyQuaternion(quat2);
				camera.up.applyQuaternion(quat2);

				camera.lookAt(camera.target);
			}

			if (stereoEnabled) {
				effect.render(scene, camera);
			} else {
				renderer.render(scene, camera);
			}
		},

		setStereoEnabled : function(value) {
			stereoEnabled = value;
			onWindowResize();
		}
	};
	return self;
}